/**
 * index.js (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AWS Lambda)
 * * ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô LINE Bot Webhook ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Express.js ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ö‡∏ô AWS Lambda
 * ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `serverless-http` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö Event ‡∏à‡∏≤‡∏Å API Gateway
 * * **‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏à‡∏≥:**
 * 1. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ `app.listen()` ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Lambda ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Port
 * 2. ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡∏ä‡∏∑‡πà‡∏≠ `CHANNEL_SECRET` ‡πÅ‡∏•‡∏∞ `CHANNEL_ACCESS_TOKEN`
 * ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Configuration ‡∏Ç‡∏≠‡∏á Lambda Function ‡∏ö‡∏ô AWS Console
 */

const serverless = require('serverless-http'); // << ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á Express app ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Lambda handler
const express = require('express');
const { Client, middleware } = require('@line/bot-sdk');

// --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (Configuration) ---

// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Configuration ‡∏à‡∏≤‡∏Å Environment Variables ‡∏Ç‡∏≠‡∏á Lambda
const lineConfig = {
  channelSecret: process.env.CHANNEL_SECRET,
  channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
};

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ Environment Variables ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if (!lineConfig.channelSecret || !lineConfig.channelAccessToken) {
  console.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables: CHANNEL_SECRET ‡πÅ‡∏•‡∏∞ CHANNEL_ACCESS_TOKEN ‡∏ö‡∏ô Lambda');
  throw new Error('Missing required environment variables');
}

// ‡πÅ‡∏™‡∏î‡∏á Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
console.log('Channel Secret (first 10 chars):', lineConfig.channelSecret?.substring(0, 10) + '...');
console.log('Access Token (first 10 chars):', lineConfig.channelAccessToken?.substring(0, 10) + '...');

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Express App ‡πÅ‡∏•‡∏∞ LINE Client
const app = express();
const client = new Client(lineConfig);


// --- Middleware ---

const lineMiddleware = middleware(lineConfig);
app.use((req, res, next) => {
  lineMiddleware(req, res, (err) => {
    if (err) {
      console.error('LINE Middleware Error:', err.message);
      return res.status(401).json({
        message: 'Unauthorized',
        error: err.message,
      });
    }
    next();
  });
});


// --- Routes (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á) ---

app.get('/', (req, res) => {
  res.status(200).json({
    status: 'LINE Bot is running on AWS Lambda! ü§ñ',
    timestamp: new Date().toISOString(),
    config: {
      channelSecret: lineConfig.channelSecret ? 'Set' : 'Not set',
      channelAccessToken: lineConfig.channelAccessToken ? 'Set' : 'Not set'
    }
  });
});

app.post('/default/webhook', (req, res) => {
  console.log('Webhook received:', JSON.stringify(req.body, null, 2));

  if (!req.body.events || req.body.events.length === 0) {
    console.log('Request body does not contain events.');
    return res.status(200).send('OK');
  }
  
  Promise.all(req.body.events.map(handleEvent))
    .then((result) => {
      console.log('All events processed successfully.');
      res.status(200).json({ status: 'success', result });
    })
    .catch((err) => {
      console.error('Error processing events:', err);
      res.status(200).json({ status: 'error' });
    });
});


// --- Logic ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Event ---

async function handleEvent(event) {
  console.log('Processing event:', event);

  // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö event ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 'message' ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  // Event ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô follow, unfollow, join, leave ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
  if (event.type !== 'message') {
    console.log(`Skipping event type: ${event.type}`);
    return Promise.resolve(null);
  }

  // ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤
  const messageType = event.message.type;
  let replyText = ''; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö

  // ‡πÉ‡∏ä‡πâ switch-case ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  switch (messageType) {
    case 'text':
      const userMessage = event.message.text;
      replyText = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (Text)\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: "${userMessage}"`;
      break;
    case 'image':
      replyText = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Image)';
      break;
    case 'video':
      replyText = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (Video)';
      break;
    case 'audio':
      replyText = '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Audio)';
      break;
    case 'file':
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢
      replyText = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡πÑ‡∏ü‡∏•‡πå (File)\n‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: ${event.message.fileName}`;
      break;
    case 'location':
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á title ‡πÅ‡∏•‡∏∞ address ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ
      replyText = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á (Location)\n‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${event.message.address}`;
      break;
    case 'sticker':
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÑ‡∏î‡πâ
      replyText = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå (Sticker)\nPackage ID: ${event.message.packageId}\nSticker ID: ${event.message.stickerId}`;
      break;
    default:
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
      replyText = `‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: "${messageType}" ‡∏ã‡∏∂‡πà‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö`;
      console.log(`Unsupported message type received: ${messageType}`);
      break;
  }

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° object ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏õ‡πá‡∏ô text ‡∏≠‡∏¢‡∏π‡πà)
  const replyMessage = {
    type: 'text',
    text: replyText,
  };

  // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö (Reply)
  try {
    console.log(`Sending reply to token: ${event.replyToken}: "${replyText}"`);
    return await client.replyMessage(event.replyToken, replyMessage);
  } catch (error) {
    console.error('Error sending reply:', error.message);
    if (error.originalError) {
      console.error('LINE API Error Details:', error.originalError.response?.data);
    }
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ null ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Promise.all ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡∏°‡∏µ‡∏ö‡∏≤‡∏á event ‡∏ó‡∏µ‡πà error
    return Promise.resolve(null);
  }
}


// --- Export Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AWS Lambda ---
module.exports.handler = serverless(app);